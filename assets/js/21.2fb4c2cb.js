(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{604:function(t,_,a){"use strict";a.r(_);var s=a(17),v=Object(s.a)({},(function(){var t=this,_=t.$createElement,a=t._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[t._v("#")]),t._v(" 1. 概述")]),t._v(" "),a("h3",{attrs:{id:"_1-1-传输层的意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-传输层的意义"}},[t._v("#")]),t._v(" 1.1 传输层的意义")]),t._v(" "),a("p",[t._v("传输层的由来：\n有了MAC地址和IP地址，我们已经可以在互联网上任意两台主机上建立通信。")]),t._v(" "),a("p",[t._v("接下来的问题是，同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？")]),t._v(" "),a("p",[t._v("也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做”端口”（port），它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。")]),t._v(" "),a("p",[t._v("“端口”是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。")]),t._v(" "),a("p",[t._v("“传输层”的功能，就是建立”端口到端口”的通信。相比之下，”网络层”的功能是建立”主机到主机”的通信。只要确定主机和端口，我们就能实现程序之间的交流。因此，Unix系统就把主机+端口，叫做”套接字”（socket）。有了它，就可以进行网络应用程序开发了。")]),t._v(" "),a("p",[t._v("所以说传输层是主机才有的层次")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630094441510.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_1-2-传输层的两个协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-传输层的两个协议"}},[t._v("#")]),t._v(" 1.2 传输层的两个协议")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630094727731.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_1-3-传输层的寻址和端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-传输层的寻址和端口"}},[t._v("#")]),t._v(" 1.3 传输层的寻址和端口")]),t._v(" "),a("p",[t._v("端口号只用于计算机分辨本地进程，总共有2^16=65536种端口号，端口号有很多种，不能随便使用")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630095024127.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630095258962.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_2-udp协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-udp协议"}},[t._v("#")]),t._v(" 2. UDP协议")]),t._v(" "),a("h3",{attrs:{id:"_2-1-udp概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-udp概述"}},[t._v("#")]),t._v(" 2.1 UDP概述")]),t._v(" "),a("p",[t._v("因为UDP一次发送一个完整报文不会分片，所以需要应用层传输过来的数据不要太大，否则网络层分片任务就很重，但是也不能太小，不然效率较低")]),t._v(" "),a("p",[t._v("UDP适合一些实时应用，因为实时应用延迟要求高，需要立即响应(比如实时发送qq消息)")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630095616466.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_2-2-udp首部格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-udp首部格式"}},[t._v("#")]),t._v(" 2.2 UDP首部格式")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020063010003161.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[t._v("ICMP 端口差错")]),t._v(" "),a("h4",{attrs:{id:"_2-2-1-udp的校验位构成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-udp的校验位构成"}},[t._v("#")]),t._v(" 2.2.1 UDP的校验位构成")]),t._v(" "),a("p",[t._v("这里的伪首部只是用来计算检验和的，计算完了就丢弃，可以见下UDP的校验方式")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630105441329.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_2-2-2-udp校验方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-udp校验方式"}},[t._v("#")]),t._v(" 2.2.2 UDP校验方式")]),t._v(" "),a("p",[t._v("在发送端的时候：")]),t._v(" "),a("p",[t._v("1.就是将每一行（4字节）拆成两部分，左右平均2字节大小，将这两字节数据写成二进制，那么2字节一共就需要2*8=16位。此时检验和没有计算，默认填充0，同时如果数据字段不整齐，则用0补齐，这样就可以写出几十行二进制数")]),t._v(" "),a("p",[t._v("2.计算着几十行二进制数按二进制反码运算求和，二进制反码运算可以参考\n二进制反码求和运算\n得到的最后简介再反码，之后将反码之后的放入原来的检验和字段")]),t._v(" "),a("p",[t._v("在接收端的时候:")]),t._v(" "),a("p",[t._v("与发送端的时候不同的是，此时检验和字段不是0了")]),t._v(" "),a("p",[t._v("按照发送端的步骤再将所有数据写成二进制进行二进制反码运算求和")]),t._v(" "),a("p",[t._v("如果最后得到结果全1就是没问题，否则丢弃")]),t._v(" "),a("h2",{attrs:{id:"_3-tcp协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-tcp协议"}},[t._v("#")]),t._v(" 3. TCP协议")]),t._v(" "),a("h3",{attrs:{id:"_3-1-tcp协议的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-tcp协议的特点"}},[t._v("#")]),t._v(" 3.1 TCP协议的特点")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630194247441.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[t._v("TCP传输数据是随机切割数据的")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020063020421472.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_3-2-tcp报文段的首部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-tcp报文段的首部"}},[t._v("#")]),t._v(" 3.2 TCP报文段的首部")]),t._v(" "),a("p",[t._v("可以看到TCP是将数据随机分割后加上TCP头传输的，所以\n序号就是为了标记这些随机分割之后的数据，这里把第一个字节的编号当成序号")]),t._v(" "),a("p",[t._v("确认号就是收到之后做一下标记，代表这之前的都收到了，希望收到的下一个编号的数据就是确认号打头的那个数据\n偏移量就是为了标记一下距离TCP开始多少字节是数据，这里的单位是4B，这个偏移量就是TCP首部长度")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630210441410.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[t._v("窗口就是接收方告诉发送方，还有多少地方（缓存）可以放数据")]),t._v(" "),a("p",[t._v("紧急指针就是告诉TCP从哪里到哪里是紧急数据")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630212601599.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_3-2-1-tcp的六个控制位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-tcp的六个控制位"}},[t._v("#")]),t._v(" 3.2.1 TCP的六个控制位")]),t._v(" "),a("p",[t._v("紧急位URG:URG的特点就是让数据插队，URG=1的就会在缓存中被提前到第一个传输")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630211126589.png",alt:""}})]),t._v(" "),a("p",[t._v("确认位ACK:\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630211354251.png",alt:""}})]),t._v(" "),a("p",[t._v("推送为PSH:就是接收端的URG，将PSH=1的数据尽快接收。\n注意一下，如果没有PSH，一般都是接收方缓存满了之后再将数据发送到主机。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630212045298.png",alt:""}})]),t._v(" "),a("p",[t._v("复位RST:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630212049447.png",alt:""}})]),t._v(" "),a("p",[t._v("同步位SYN:A和B主机要建立连接，就A先发一个报文，其中SYN=1,B收到之后也回复一个SYN=1的报文，代表接受连接")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630212152221.png",alt:""}})]),t._v(" "),a("p",[t._v("终止位FIN:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630212056958.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_3-3-tcp连接管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-tcp连接管理"}},[t._v("#")]),t._v(" 3.3 TCP连接管理")]),t._v(" "),a("h3",{attrs:{id:"_3-3-1-tcp三次握手-建立连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-tcp三次握手-建立连接"}},[t._v("#")]),t._v(" 3.3.1 TCP三次握手（建立连接）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630213814996.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630214925395.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_3-3-2-tcp四次挥手-连接释放"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-tcp四次挥手-连接释放"}},[t._v("#")]),t._v(" 3.3.2 TCP四次挥手（连接释放）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630215522825.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[t._v("为什么要等待2MSL的时间：害怕最后确认关闭的消息接收端没有接收到")]),t._v(" "),a("h3",{attrs:{id:"_3-4-tcp可靠传输"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-tcp可靠传输"}},[t._v("#")]),t._v(" 3.4 TCP可靠传输")]),t._v(" "),a("p",[t._v("TCP是提供可靠传输，UDP这种本身还是不可靠传输的就再靠应用层解决了")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630220542461.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_3-4-1-序号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-序号"}},[t._v("#")]),t._v(" 3.4.1 序号")]),t._v(" "),a("p",[t._v("就是TCP根据下方数据链路层的MTU（最大传输单元）来随即将数据切割成好几端并且进行编号")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630221424853.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_3-4-2-累计确认"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-累计确认"}},[t._v("#")]),t._v(" 3.4.2 累计确认")]),t._v(" "),a("p",[t._v("发送方每一次发送数据之后都需要接收方进行确认。\nTCP使用的是累计确认机制，就是从第一个丢失的字节开始请求丢失的报文段。")]),t._v(" "),a("h4",{attrs:{id:"_3-4-3-重传"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-3-重传"}},[t._v("#")]),t._v(" 3.4.3 重传")]),t._v(" "),a("p",[t._v("为什么要使用自适应算法？网络环境太复杂，路径又长又短，RTT设置短了照顾不了距离远的，RTT设置长了又导致网络利用率降低，所以使用RTTs")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630222205619.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_3-5-tcp流量控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-tcp流量控制"}},[t._v("#")]),t._v(" 3.5 TCP流量控制")]),t._v(" "),a("p",[t._v("简单来说就是接收方可以动态的发送信息告诉发送方发送窗口的大小。")]),t._v(" "),a("p",[t._v("接收方接受不过来了就让发送方发送窗口小点，这样发送方发送的速率就慢下来了，接收方就有时间处理它的数据了\n接受方处理完了也可以发送请求让发送方发送窗口大点，这样发送方发送的速率就快起来了，接收方就可以处理更多数据而不是空闲等着收数据了")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/202006302226272.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_3-5-1-计时器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-1-计时器"}},[t._v("#")]),t._v(" 3.5.1 计时器")]),t._v(" "),a("p",[t._v("在本例子中，使用的累计确认机制（一次回复收到ack=201）和三次流量控制机制。")]),t._v(" "),a("p",[t._v("但是有一个情况就是，如果最后B不允许A再发送数据了，B在处理完数据之后想要恢复窗口大小时发送的有rwnd大小的数据报丢了怎么办？此时A有B的指令在前，发送窗口为0无法发送数据，B也在等待A回复，造成了类似死锁的现象")]),t._v(" "),a("p",[t._v("解决方法：使用计时器")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630223616929.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_3-6-tcp拥塞控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-tcp拥塞控制"}},[t._v("#")]),t._v(" 3.6 TCP拥塞控制")]),t._v(" "),a("p",[t._v("流量控制是对单独一个来说的，拥塞控制是一群")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630224242515.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_3-6-1-拥塞控制四种算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-1-拥塞控制四种算法"}},[t._v("#")]),t._v(" 3.6.1 拥塞控制四种算法")]),t._v(" "),a("p",[t._v("这里虽然是四种算法，但是通常是两两结合进行使用")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630232411944.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_3-6-2-慢开始和拥塞避免"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-2-慢开始和拥塞避免"}},[t._v("#")]),t._v(" 3.6.2 慢开始和拥塞避免")]),t._v(" "),a("p",[t._v("这里开始时以指数形式增长，ssthresh的意思是慢开始门限，代表从这个地方注入的报文段就比较多了，需要开始慢速增加了。")]),t._v(" "),a("p",[t._v("之后一段都是线性增长，每次增加1，直至达到网络拥塞状态")]),t._v(" "),a("p",[t._v("瞬间将cwnd设置为1，同时调整原来的ssthresh的值到之前达到网络拥塞状态的1/2,（这里是24降到12）\n重复以上步骤，但是注意此时ssthresh变了之后线性增长的转折点也变了")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630232910475.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_3-6-3-快重传和快恢复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-3-快重传和快恢复"}},[t._v("#")]),t._v(" 3.6.3 快重传和快恢复")]),t._v(" "),a("p",[t._v("这里和上面的慢开始和拥塞避免的一开始步骤差不多，都是先指数增长再转变为线性增长。")]),t._v(" "),a("p",[t._v("不同的点是快重传和快恢复算法是在收到连续的ack确认之后执行，这里的ack就是冗余ack，冗余ack的特点是如果多次对某一段请求的数据没有被收到，达到一定数目之后就会立即执行重传。但是此时只是降到现在cwnd的一半，再重新线性增长。而不是像慢开始和拥塞避免的从头开始")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200630233701386.png?shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA2NzYwMw==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_4-传输层常见题目收集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-传输层常见题目收集"}},[t._v("#")]),t._v(" 4. 传输层常见题目收集")]),t._v(" "),a("h3",{attrs:{id:"_4-1-tcp、udp区别及使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-tcp、udp区别及使用场景"}},[t._v("#")]),t._v(" 4.1. TCP、UDP区别及使用场景")]),t._v(" "),a("p",[t._v("TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接。")]),t._v(" "),a("p",[t._v("TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。\nTCP通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。")]),t._v(" "),a("p",[t._v("UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。")]),t._v(" "),a("p",[t._v("每一条TCP连接只能是点到点的；UDP支持一对一、一对多、多对一和多对多的交互通信。")]),t._v(" "),a("p",[t._v("TCP对系统资源要求较多，UDP对系统资源要求较少。")]),t._v(" "),a("h3",{attrs:{id:"_4-2-tcp两次握手可以吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-tcp两次握手可以吗"}},[t._v("#")]),t._v(" 4.2 TCP两次握手可以吗？")]),t._v(" "),a("p",[t._v("第三次握手主要为了防止已失效的连接请求报文段突然又传输到了服务端，导致产生问题。")]),t._v(" "),a("p",[t._v("比如客户端A发出连接请求，可能因为网络阻塞原因，A没有收到确认报文，于是A再重传一次连接请求。")]),t._v(" "),a("p",[t._v("连接成功，等待数据传输完毕后，就释放了连接。")]),t._v(" "),a("p",[t._v("然后A发出的第一个连接请求等到连接释放以后的某个时间才到达服务端B，此时B误认为A又发出一次新的连接请求，于是就向A发出确认报文段。")]),t._v(" "),a("p",[t._v("如果不采用三次握手，只要B发出确认，就建立新的连接了，此时A不会响应B的确认且不发送数据，则B一直等待A发送数据，浪费资源。")]),t._v(" "),a("h3",{attrs:{id:"_4-3-第四次挥手为什么要等待2msl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-第四次挥手为什么要等待2msl"}},[t._v("#")]),t._v(" 4.3 第四次挥手为什么要等待2MSL？")]),t._v(" "),a("p",[t._v("1.保证A发送的最后一个ACK报文段能够到达B。")]),t._v(" "),a("p",[t._v("这个ACK报文段有可能丢失，B收不到这个确认报文，就会超时重传连接释放报文段，然后A可以在2MSL时间内收到这个重传的连接释放报文段，接着A重传一次确认，重新启动2MSL计时器，最后A和B都进入到CLOSED状态，若A在TIME-WAIT状态不等待一段时间，而是发送完ACK报文段后立即释放连接，则无法收到B重传的连接释放报文段，所以不会再发送一次确认报文段，B就无法正常进入到CLOSED状态。")]),t._v(" "),a("p",[t._v("2.防止已失效的连接请求报文段出现在本连接中。")]),t._v(" "),a("p",[t._v("A在发送完最后一个ACK报文段后，再经过2MSL，就可以使这个连接所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现旧的连接请求报文段。")]),t._v(" "),a("h3",{attrs:{id:"_4-4-如果-1、2、3-次握手分别丢包了-会发生什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-如果-1、2、3-次握手分别丢包了-会发生什么"}},[t._v("#")]),t._v(" 4.4 如果 1、2、3 次握手分别丢包了，会发生什么？")]),t._v(" "),a("p",[t._v("第一次客户端发的 SYN 丢了：\n客户端迟迟接不到响应，超时重传。")]),t._v(" "),a("p",[t._v("第二次服务端发的 SYN 和 ACK 丢了：\n客户端迟迟接不到响应，超时重传")]),t._v(" "),a("p",[t._v("第三次客户端发的 ACK 丢了？")]),t._v(" "),a("p",[t._v("因为第三次发完 ACK 之后，随时接下来会继续往服务端发数据，我看过一篇博客里写的是发数据时会带上 ACK，所以客户端响应的 ACK 包丢了，服务器也能够通过之后的包来建立连接。")]),t._v(" "),a("p",[t._v("第三次故意不发送 ACK 呢？")]),t._v(" "),a("p",[t._v("洪水攻击，服务器在等待第三次握手时是处于半连接状态，也是需要耗费资源的，如果有攻击者故意不发送第三次 ACK，让大量连接处于半连接状态，那么会把服务器资源耗尽，洪水攻击的目的就达到了。")])])}),[],!1,null,null,null);_.default=v.exports}}]);