(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{667:function(t,e,n){"use strict";n.r(e);var s=n(17),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("如果没有 defer 或 async 属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。")]),t._v(" "),n("p",[t._v("下图可以直观的看出三者之间的区别:")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1500604/1603547262709-5029c4e4-42f5-4fd4-bcbb-c0e0e3a40f5a.png",alt:"image.png"}})]),t._v(" "),n("p",[t._v("其中蓝色代表 js 脚本网络加载时间，红色代表 js 脚本执行时间，绿色代表 html 解析。")]),t._v(" "),n("p",[n("strong",[t._v("defer 和 async 属性都是去异步加载外部的 JS 脚本文件，它们都不会阻塞页面的解析")]),t._v("，其区别如下：")]),t._v(" "),n("ul",[n("li",[t._v("**执行顺序：**多个带 async 属性的标签，不能保证加载的顺序；多个带 defer 属性的标签，按照加载顺序执行；")]),t._v(" "),n("li",[n("strong",[t._v("脚本是否并行执行："),n("strong",[t._v("async 属性，表示")]),t._v("后续文档的加载和执行与 js 脚本的加载和执行是并行进行的")]),t._v("，即异步执行；defer 属性，加载后续文档的过程和 js 脚本的加载(此时仅加载不执行)是并行进行的(异步)，js 脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded 事件触发执行之前。")])])])}),[],!1,null,null,null);e.default=r.exports}}]);