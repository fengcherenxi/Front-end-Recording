(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{626:function(t,a,s){"use strict";s.r(a);var n=s(17),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-对闭包的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-对闭包的理解"}},[t._v("#")]),t._v(" 1. 对闭包的理解")]),t._v(" "),s("p",[s("strong",[t._v("闭包是指有权访问另一个函数作用域中变量的函数")]),t._v("，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。")]),t._v(" "),s("p",[s("strong",[t._v("原理：垃圾回收机制+引用延迟回收")])]),t._v(" "),s("p",[t._v("优点：")]),t._v(" "),s("ul",[s("li",[t._v("在函数外能访问函数内的变量。可使用这种方法来创建"),s("strong",[t._v("私有变量")]),t._v("。")]),t._v(" "),s("li",[t._v("使已经运行结束的函数上下文中的变量对象继续留在内存中，闭包函数保留这个变量对象的引用，这个变量对象不会被回收，即"),s("strong",[t._v("延长局部变量的生命周期")]),t._v("。")]),t._v(" "),s("li",[t._v("突破函数独立作用域，可访问函数内部的变量\n缺点：")])]),t._v(" "),s("ul",[s("li",[t._v("绕过垃圾回收机制，内存泄露\n应用：")]),t._v(" "),s("li",[t._v("return 一个引用父级变量的函数")]),t._v(" "),s("li",[t._v("函数作为参数")]),t._v(" "),s("li",[t._v("自调用函数")]),t._v(" "),s("li",[t._v("循环赋值")]),t._v(" "),s("li",[t._v("回调函数")]),t._v(" "),s("li",[t._v("防抖节流")]),t._v(" "),s("li",[t._v("函数柯里化")])]),t._v(" "),s("p",[t._v("经典面试题：循环中使用闭包解决 var 定义函数的问题")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("首先因为 "),s("code",[t._v("setTimeout")]),t._v(" 是个异步函数，所以会先把循环全部执行完毕，这时候 "),s("code",[t._v("i")]),t._v(" 就是 6 了，所以会输出一堆 6。解决办法有三种：")]),t._v(" "),s("ul",[s("li",[t._v("闭包")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在上述代码中，首先使用了立即执行函数将 "),s("code",[t._v("i")]),t._v(" 传入函数内部，这个时候值就被固定在了参数 "),s("code",[t._v("j")]),t._v(" 上面不会改变，当下次执行 "),s("code",[t._v("timer")]),t._v(" 这个闭包的时候，就可以使用外部函数的变量 "),s("code",[t._v("j")]),t._v("，从而达到目的。")]),t._v(" "),s("p",[t._v("相当于提前保存了循环变量i的每一个值")]),t._v(" "),s("ul",[s("li",[t._v("第二种就是使用 "),s("code",[t._v("setTimeout")]),t._v(" 的第三个参数，这个参数会被当成 "),s("code",[t._v("timer")]),t._v(" 函数的参数传入。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    i\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("第三种就是使用 "),s("code",[t._v("let")]),t._v(" 定义 "),s("code",[t._v("i")]),t._v(" 了来解决问题了，这个也是最为推荐的方式")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"_2-红宝书关于闭包的部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-红宝书关于闭包的部分"}},[t._v("#")]),t._v(" 2. 红宝书关于闭包的部分")]),t._v(" "),s("h3",{attrs:{id:"_2-1-递归"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-递归"}},[t._v("#")]),t._v(" 2.1 递归")]),t._v(" "),s("ul",[s("li",[t._v("第一种解决递归问题的方法：arguments.callee是一个指向正在执行的函数的指针，因此可以用它来实现对函数的递归调用")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://app.yinxiang.com/files/common-services/binary-datas/c2VydmljZVR5cGU9MiZzZXJ2aWNlRGF0YT17Im5vdGVHdWlkIjoiZjA3MDZiZTUtODdhYi00ZGM1LThjY2EtNWE4YTM4ODFlM2I2IiwicmVzb3VyY0d1aWQiOiJlMDEyN2U5MC04YTdkLTQ5MDMtODFjMS1kZDEwZjk3NjZhZWMifQ==",alt:""}}),t._v("\n通过使用arguments.callee代替函数名，可以确保无论怎样调用函数都不会出问题。因此，在编写递归函数时，使用arguments.callee总比使用函数名更保险。")]),t._v(" "),s("ul",[s("li",[t._v("第一种解决递归问题的方法：严格模式下，不能通过脚本访问arguments.callee——可以使用命名函数表达式来达成相同的结果。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://app.yinxiang.com/files/common-services/binary-datas/c2VydmljZVR5cGU9MiZzZXJ2aWNlRGF0YT17Im5vdGVHdWlkIjoiZjA3MDZiZTUtODdhYi00ZGM1LThjY2EtNWE4YTM4ODFlM2I2IiwicmVzb3VyY0d1aWQiOiI3MWExMTcxNC1jMDUzLTQ3MjEtYTlkZC0xZGYwYzI3NzhlOTMifQ==",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_2-2-闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-闭包"}},[t._v("#")]),t._v(" 2.2 闭包")]),t._v(" "),s("p",[t._v("一般来讲，函数执行完后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。")]),t._v(" "),s("p",[t._v("但是，闭包有所不同。在另一个函数内部定义的函数会将包含外部函数的活动对象添加到它的作用域链中。")]),t._v(" "),s("p",[t._v("原则：只要函数还在使用，函数外层、再外层的作用域就不会被清理，因此闭包的垃圾回收机制不是立即清理的，而是要看内部的所有函数是否还在用，比如将变量引用赋值为null解除引用，从而释放闭包。")]),t._v(" "),s("p",[t._v("注意：由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多，我们建议读者只在绝对必要时再考虑使用闭包。虽然像V8等优化后的JavaScript引擎会尝试回收被闭包占用的内存，但请大家还是要慎重使用闭包。")]),t._v(" "),s("h4",{attrs:{id:"_2-2-1-闭包与变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-闭包与变量"}},[t._v("#")]),t._v(" 2.2.1 闭包与变量")]),t._v(" "),s("p",[t._v("副作用：闭包只能取得包含函数中任何变量的最后一个值")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://app.yinxiang.com/files/common-services/binary-datas/c2VydmljZVR5cGU9MiZzZXJ2aWNlRGF0YT17Im5vdGVHdWlkIjoiZjA3MDZiZTUtODdhYi00ZGM1LThjY2EtNWE4YTM4ODFlM2I2IiwicmVzb3VyY0d1aWQiOiIyNzFkODQwMC1lNDFhLTQzNTUtODcyYy01OGVjODYwMDRmYjkifQ==",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("每个函数都返回10。因为每个函数的作用域链中都保存着createFunctions()函数的活动对象，所以它们引用的都是同一个变量i。当createFunctions()函数返回后，变量i的值是10，此时每个函数都引用着保存变量i的同一个变量对象，所以在每个函数内部i的值都是10。")]),t._v(" "),s("li",[t._v("本质上是因为var i在for内部并没有创建新的子作用域，最终所有数组引用的i都是函数中的同一个i，而i经历for遍历已经变为了10。因此解决方法是要创建属于自己的一个变量保存下来，一种是通过let i声明，另一种则使用闭包为每一次循环遍历创建私有变量，本质上即利用匿名函数模拟一个块级作用域。")])]),t._v(" "),s("p",[t._v("解决方法：可以通过创建另一个匿名函数强制让闭包的行为符合预期")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://app.yinxiang.com/files/common-services/binary-datas/c2VydmljZVR5cGU9MiZzZXJ2aWNlRGF0YT17Im5vdGVHdWlkIjoiZjA3MDZiZTUtODdhYi00ZGM1LThjY2EtNWE4YTM4ODFlM2I2IiwicmVzb3VyY0d1aWQiOiI3Mzk1MjNmNC0zNGIyLTQzM2YtYjFkZC0zMWEwMWRiNWE0ODMifQ==",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("我们没有直接把闭包赋值给数组，而是定义了一个匿名函数，并将立即执行该匿名函数的结果赋给数组。在这个匿名函数内部，又创建并返回了一个访问num的闭包。这样一来，result数组中的每个函数都有自己num变量的一个副本，因此就可以返回各自不同的数值了。")])]),t._v(" "),s("h4",{attrs:{id:"_2-2-2-关于this对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-关于this对象"}},[t._v("#")]),t._v(" 2.2.2 关于this对象")]),t._v(" "),s("p",[t._v("this对象是在运行时基于函数的执行环境绑定的：")]),t._v(" "),s("ul",[s("li",[t._v("在全局函数中，this等于window")]),t._v(" "),s("li",[t._v("当函数被作为某个对象的方法调用时，this等于那个对象。")]),t._v(" "),s("li",[t._v("匿名函数的执行环境具有全局性，因此其this对象通常指向window。\n"),s("ul",[s("li",[t._v("为什么匿名函数没有取得其包含作用域（或外部作用域）的this对象呢？")]),t._v(" "),s("li",[t._v("每个函数在被调用时都会自动取得两个特殊变量：this和arguments。内部函数在搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量。不过，把外部作用域中的this对象保存在一个闭包能够访问到的变量里，就可以让闭包访问该对象了。")]),t._v(" "),s("li",[t._v("this和arguments也存在同样的问题。如果想访问作用域中的arguments对象，必须将对该对象的引用保存到另一个闭包能够")])])])]),t._v(" "),s("h4",{attrs:{id:"_2-2-3-内存泄漏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-内存泄漏"}},[t._v("#")]),t._v(" 2.2.3 内存泄漏")]),t._v(" "),s("p",[t._v("由于IE9之前的版本对JScript对象和COM对象使用不同的垃圾收集例程（第4章曾经讨论过），因此闭包在IE的这些版本中会导致一些特殊的问题。具体来说如果闭包的作用域链中保存着一个HTML元素，那么就意味着该元素将无法被销毁。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://app.yinxiang.com/files/common-services/binary-datas/c2VydmljZVR5cGU9MiZzZXJ2aWNlRGF0YT17Im5vdGVHdWlkIjoiZjA3MDZiZTUtODdhYi00ZGM1LThjY2EtNWE4YTM4ODFlM2I2IiwicmVzb3VyY0d1aWQiOiJlNTJmYmY1NC00YmFhLTQ4M2ItYTZkYi02MzgyY2Y0MmQ0YmIifQ==",alt:""}})]),t._v(" "),s("p",[t._v("只要匿名函数存在，element的引用数至少也是1，因此它所占用的内存就永远不会被回收。解决方法：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://app.yinxiang.com/files/common-services/binary-datas/c2VydmljZVR5cGU9MiZzZXJ2aWNlRGF0YT17Im5vdGVHdWlkIjoiZjA3MDZiZTUtODdhYi00ZGM1LThjY2EtNWE4YTM4ODFlM2I2IiwicmVzb3VyY0d1aWQiOiIwZDUyZjkwZC1iNjA1LTRjYzctYWI2OS0xY2YxMGEzMjU1YWMifQ==",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("通过把element.id的一个副本保存在一个变量中，并且在闭包中引用该变量消除了循环引用。但仅仅做到这一步，还是不能解决内存泄漏的问题。必须要记住：闭包会引用包含函数的整个活动对象，而其中包含着element。即使闭包不直接引用element，包含函数的活动对象中也仍然会保存一个引用。因此，有必要把element变量设置为null。这样就能够解除对DOM对象的引用，顺利地减少其引用数，确保正常回收其占用的内存。")])]),t._v(" "),s("h3",{attrs:{id:"_2-3-模仿块级作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-模仿块级作用域"}},[t._v("#")]),t._v(" 2.3 模仿块级作用域")]),t._v(" "),s("p",[t._v("JavaScript没有块级作用域的概念。这意味着在块语句中定义的变量，实际上是在包含函数中而非语句中创建的")]),t._v(" "),s("p",[t._v("匿名函数可以用来模仿块级作用域并避免这个问题。")]),t._v(" "),s("p",[t._v("用作块级作用域（通常称为私有作用域）的匿名函数的语法如下所示。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://app.yinxiang.com/files/common-services/binary-datas/c2VydmljZVR5cGU9MiZzZXJ2aWNlRGF0YT17Im5vdGVHdWlkIjoiZjA3MDZiZTUtODdhYi00ZGM1LThjY2EtNWE4YTM4ODFlM2I2IiwicmVzb3VyY0d1aWQiOiI1ZjdmOTQwMS1lNTBkLTQxZmMtOTZlYy1lYTI4NWYwZTE3YzIifQ==",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("将函数声明包含在一对圆括号中，表示它实际上是一个函数表达式。而紧随其后的另一对圆括号会立即调用这个函数。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://app.yinxiang.com/files/common-services/binary-datas/c2VydmljZVR5cGU9MiZzZXJ2aWNlRGF0YT17Im5vdGVHdWlkIjoiZjA3MDZiZTUtODdhYi00ZGM1LThjY2EtNWE4YTM4ODFlM2I2IiwicmVzb3VyY0d1aWQiOiI4Y2FjYzkyOC00ZjhiLTQ5ODgtYjEyNy00NDY3ODMwZWYwYzkifQ==",alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://app.yinxiang.com/files/common-services/binary-datas/c2VydmljZVR5cGU9MiZzZXJ2aWNlRGF0YT17Im5vdGVHdWlkIjoiZjA3MDZiZTUtODdhYi00ZGM1LThjY2EtNWE4YTM4ODFlM2I2IiwicmVzb3VyY0d1aWQiOiJhYjA5OTM3Zi1mOGEyLTRkOWUtYjc3MS1mMzI4Yjk1MzBhZWEifQ==",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("这段代码会导致语法错误，是因为JavaScript将function关键字当作一个函数声明的开始，而函数声明后面不能跟圆括号。然而，函数表达式的后面可以跟圆括号。要将函数声明转换成函数表达式，只要像下面这样给它加上一对圆括号即可。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://app.yinxiang.com/files/common-services/binary-datas/c2VydmljZVR5cGU9MiZzZXJ2aWNlRGF0YT17Im5vdGVHdWlkIjoiZjA3MDZiZTUtODdhYi00ZGM1LThjY2EtNWE4YTM4ODFlM2I2IiwicmVzb3VyY0d1aWQiOiI4MzNmZjIzZi1iNDdmLTQ1YTgtOTM3OS1mZDg2MjU5YTE0ZDgifQ==",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("无论在什么地方，只要临时需要一些变量，就可以使用私有作用域，如下所示：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://app.yinxiang.com/files/common-services/binary-datas/c2VydmljZVR5cGU9MiZzZXJ2aWNlRGF0YT17Im5vdGVHdWlkIjoiZjA3MDZiZTUtODdhYi00ZGM1LThjY2EtNWE4YTM4ODFlM2I2IiwicmVzb3VyY0d1aWQiOiI5OWEyNDdkMC1hOGJiLTQ2Y2UtYTQ2Zi1mNTYxYWZhNGZiMGQifQ==",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("我们在for循环外部插入了一个私有作用域。在匿名函数中定义的任何变量，都会在执行结束时被销毁。因此，变量i只能在循环中使用，使用后即被销毁。而在私有作用域中能够访问变量count，是因为这个匿名函数是一个闭包，它能够访问包含作用域中的所有变量。")])]),t._v(" "),s("p",[s("strong",[t._v("重点：这种做法可以减少闭包占用的内存问题，因为没有指向匿名函数的引用。只要函数执行完毕，就可以立即销毁其作用域链了。")])]),t._v(" "),s("h3",{attrs:{id:"_2-4-私有变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-私有变量"}},[t._v("#")]),t._v(" 2.4 私有变量")]),t._v(" "),s("p",[t._v("严格来讲，JavaScript中没有私有成员的概念；所有对象属性都是公有的。")]),t._v(" "),s("p",[t._v("但有私有变量的概念。——任何在函数中定义的变量，都可以认为是私有变量。私有变量包括函数的参数、局部变量和在函数内部定义的其他函数。")]),t._v(" "),s("ul",[s("li",[t._v("如果在这个函数内部创建一个闭包，那么闭包通过自己的作用域链也可以访问这些变量。而利用这一点，就可以创建用于访问私有变量的公有方法。我们把有权访问私有变量和私有函数的公有方法称为特权方法（privileged method）。有两种在对象上创建特权方法的方式。\n"),s("ul",[s("li",[t._v("第一种是在构造函数中定义特权方法")]),t._v(" "),s("li",[t._v("通过在私有作用域中定义私有变量或函数，同样也可以创建特权方法。")])])])]),t._v(" "),s("p",[s("strong",[t._v("1）在构造函数中定义特权方法：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://app.yinxiang.com/files/common-services/binary-datas/c2VydmljZVR5cGU9MiZzZXJ2aWNlRGF0YT17Im5vdGVHdWlkIjoiZjA3MDZiZTUtODdhYi00ZGM1LThjY2EtNWE4YTM4ODFlM2I2IiwicmVzb3VyY0d1aWQiOiI3MGIwMWIyNi0zYTdhLTRkMzQtOGEyOS1iYmQ5ZmU3NGY5MzMifQ==",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_2-5-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-总结"}},[t._v("#")]),t._v(" 2.5 总结")]),t._v(" "),s("p",[t._v("函数表达式的特点：")]),t._v(" "),s("ul",[s("li",[t._v("函数表达式不同于函数声明。函数声明要求有名字，但函数表达式不需要。没有名字的函数表达式也叫做匿名函数。")]),t._v(" "),s("li",[t._v("在无法确定如何引用函数的情况下，递归函数就会变得比较复杂；")]),t._v(" "),s("li",[t._v("递归函数应该始终使用arguments.callee来递归地调用自身，不要使用函数名——函数名可能会发生变化。")])]),t._v(" "),s("p",[t._v("闭包原理：")]),t._v(" "),s("ul",[s("li",[t._v("在后台执行环境中，闭包的作用域链包含着它自己的作用域、包含函数的作用域和全局作用域。")]),t._v(" "),s("li",[t._v("通常，函数的作用域及其所有变量都会在函数执行结束后被销毁。")]),t._v(" "),s("li",[t._v("但是，当函数返回了一个闭包时，这个函数的作用域将会一直在内存中保存到闭包不存在为止。")])]),t._v(" "),s("p",[t._v("闭包模仿块级作用域：")]),t._v(" "),s("ul",[s("li",[t._v("创建并立即调用一个函数，这样既可以执行其中的代码，又不会在内存中留下对该函数的引用。")]),t._v(" "),s("li",[t._v("结果就是函数内部的所有变量都会被立即销毁——除非将某些变量赋值给了包含作用域（即外部作用域）中的变量。")])]),t._v(" "),s("p",[t._v("闭包在对象中创建私有变量：")]),t._v(" "),s("ul",[s("li",[t._v("即使JavaScript中没有正式的私有对象属性的概念，但可以使用闭包来实现公有方法，而通过公有方法可以访问在包含作用域中定义的变量。")]),t._v(" "),s("li",[t._v("有权访问私有变量的公有方法叫做特权方法。")]),t._v(" "),s("li",[t._v("可以使用构造函数模式、原型模式来实现自定义类型的特权方法，也可以使用模块模式、增强的模块模式来实现单例的特权方法。")])]),t._v(" "),s("p",[t._v("创建闭包必须维护额外的作用域，所以过度使用它们可能会占用大量内存。")])])}),[],!1,null,null,null);a.default=r.exports}}]);