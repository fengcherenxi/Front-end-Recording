(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{637:function(e,t,_){"use strict";_.r(t);var v=_(17),o=Object(v.a)({},(function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"_1-说一下vue的生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-说一下vue的生命周期"}},[e._v("#")]),e._v(" 1. 说一下Vue的生命周期")]),e._v(" "),_("p",[e._v("从开始创建、初始化数据、编译模版、挂载Dom -> 渲染、更新 -> 渲染、卸载 等⼀系列过程，即⽣命周期。")]),e._v(" "),_("ul",[_("li",[_("strong",[e._v("beforeCreate（创建前）")]),e._v("：数据观测和初始化事件还未开始，此时 data 的响应式追踪、event/watcher 都还没有被设置，也就是说不能访问到data、computed、watch、methods上的方法和数据。")]),e._v(" "),_("li",[_("strong",[e._v("created")]),e._v("**（创建后）** ：完成后实例上配置的 options 包括 data、computed、watch、methods 等都配置完成，但是未挂载到 DOM，所以不能访问到 "),_("code",[e._v("$el")]),e._v(" 属性。")]),e._v(" "),_("li",[_("strong",[e._v("beforeMount（挂载前）")]),e._v("：在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。还没有挂载html到页面上。")]),e._v(" "),_("li",[_("strong",[e._v("mounted（挂载后）")]),e._v("：在el被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html 页面中。此过程中进行ajax交互。")]),e._v(" "),_("li",[_("strong",[e._v("beforeUpdate（更新前）")]),e._v("：响应式数据更新了但对应真实 DOM 还没被渲染。")]),e._v(" "),_("li",[_("strong",[e._v("updated（更新后）")]),e._v(" ：在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。此时 DOM 已经根据响应式数据的变化更新了。组件DOM已更新，可以执行依赖于DOM的操作。应避免在此期间更改状态，可能会导致无限循环。该钩子在服务器端渲染期间不被调用。")]),e._v(" "),_("li",[_("strong",[e._v("beforeDestroy（销毁前）")]),e._v("：实例销毁之前调用。实例仍然完全可用，"),_("code",[e._v("this")]),e._v(" 仍能获取到实例。——改名：beforeUnmount(卸载前)")]),e._v(" "),_("li",[_("strong",[e._v("destroyed（销毁后）")]),e._v("：实例销毁后调用。所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务端渲染期间不被调用。——改名：unmount(卸载)")])]),e._v(" "),_("p",[e._v("Vue3.0也提供了Composition API形式的生命周期钩子，与Vue2.x中钩子对应关系如下：")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("beforeCreate")]),e._v("===>"),_("code",[e._v("setup()")])]),e._v(" "),_("li",[_("code",[e._v("created")]),e._v("===>"),_("code",[e._v("setup()")])]),e._v(" "),_("li",[_("code",[e._v("beforeMount")]),e._v("===>"),_("code",[e._v("onBeforeMount")])]),e._v(" "),_("li",[_("code",[e._v("mounted")]),e._v("===>"),_("code",[e._v("onMounted")])]),e._v(" "),_("li",[_("code",[e._v("beforeUpdate")]),e._v("===>"),_("code",[e._v("onBeforeUpdate")])]),e._v(" "),_("li",[_("code",[e._v("updated")]),e._v("===>"),_("code",[e._v("onUpdated")])]),e._v(" "),_("li",[_("code",[e._v("beforeMount")]),e._v("===>"),_("code",[e._v("onBeforeUnmount")])]),e._v(" "),_("li",[_("code",[e._v("unmounted")]),e._v("===>"),_("code",[e._v("onUnmounted")])])]),e._v(" "),_("p",[_("code",[e._v("keep-alive")]),e._v(" 独有 "),_("code",[e._v("activated")]),e._v(" 和 "),_("code",[e._v("deactivated")]),e._v(" 。（如定时器）beforeDestroy 和 destroyed 不再触发，组件不会被真正销毁。当组件被换掉时，会被缓存到内存中、触发 deactivated；切回来时去缓存里找这个组件，触发activated。")]),e._v(" "),_("h2",{attrs:{id:"_2-子组件和父组件执行顺序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-子组件和父组件执行顺序"}},[e._v("#")]),e._v(" 2. 子组件和父组件执行顺序")]),e._v(" "),_("h3",{attrs:{id:"_2-1-加载渲染过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-加载渲染过程"}},[e._v("#")]),e._v(" 2.1 加载渲染过程")]),e._v(" "),_("ul",[_("li",[e._v("父组件 beforeCreate")]),e._v(" "),_("li",[e._v("父组件 created")]),e._v(" "),_("li",[e._v("父组件 beforeMount")]),e._v(" "),_("li",[e._v("子组件 beforeCreate")]),e._v(" "),_("li",[e._v("子组件 created")]),e._v(" "),_("li",[e._v("子组件 beforeMount")]),e._v(" "),_("li",[e._v("子组件 mounted")]),e._v(" "),_("li",[e._v("父组件 mounted")])]),e._v(" "),_("h3",{attrs:{id:"_2-2-更新过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-更新过程"}},[e._v("#")]),e._v(" 2.2 更新过程")]),e._v(" "),_("ul",[_("li",[e._v("父组件 beforeUpdate")]),e._v(" "),_("li",[e._v("子组件 beforeUpdate")]),e._v(" "),_("li",[e._v("子组件 updated")]),e._v(" "),_("li",[e._v("父组件 updated")])]),e._v(" "),_("h3",{attrs:{id:"_2-3-销毁过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-销毁过程"}},[e._v("#")]),e._v(" 2.3 销毁过程")]),e._v(" "),_("ul",[_("li",[e._v("父组件 beforeDestroy")]),e._v(" "),_("li",[e._v("子组件 beforeDestroy")]),e._v(" "),_("li",[e._v("子组件 destroyed")]),e._v(" "),_("li",[e._v("父组件 destoryed")])]),e._v(" "),_("h2",{attrs:{id:"_3-created和mounted的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-created和mounted的区别"}},[e._v("#")]),e._v(" 3. created和mounted的区别")]),e._v(" "),_("ul",[_("li",[e._v("created：渲染成html前调用，初始化某些属性值再渲染成视图。——常用于异步数据获取")]),e._v(" "),_("li",[e._v("mounted：渲染成html后调用，初始化页面后再对html的dom操作。")])]),e._v(" "),_("h2",{attrs:{id:"_4-一般在哪个生命周期请求异步数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-一般在哪个生命周期请求异步数据"}},[e._v("#")]),e._v(" 4. 一般在哪个生命周期请求异步数据")]),e._v(" "),_("p",[e._v("created、beforeMount、mounted 中调用，这些钩子data 已创建，可以将服务端端返回的数据进行赋值。推荐created优点：")]),e._v(" "),_("ul",[_("li",[e._v("更快获取到服务端数据，减少页面加载时间，用户体验更好；")]),e._v(" "),_("li",[e._v("SSR不支持 beforeMount、mounted 钩子函数，放在 created 中有助于一致性。")])])])}),[],!1,null,null,null);t.default=o.exports}}]);